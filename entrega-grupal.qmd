---
title: "Entrega grupal"
author: 'shengjie ji'
format: revealjs
editor: visual
execute :
  echo : true
fontsize: 27pt

---

```{r paquetes}
#| echo: false
rm(list = ls()) # Borramos variables de environment
library(tidyverse)
library(lubridate)
library(glue)
library(scales)

```

```{r}
#| echo: false
# NO TOQUES NADA
datos_elecciones <- read_csv(file = "./datos/datos_elecciones_brutos.csv")
cod_mun <- read_csv(file = "./datos/cod_mun.csv")
encuestas <- read_csv(file = "./datos/historical_surveys.csv")
siglas <- read_csv(file = "./datos/siglas.csv") 
```



## Tidydata de Datos_elecciones
### **Importar** los archivos de datos electorales , que compila información sobre las elecciones al Congreso de los Diputados de España desde 2008 hasta 2019 .Después las convertimos en tidydata. 

```{r, echo=TRUE, results='hide'}

datos_elecciones<-  datos_elecciones |> 
      filter(between(anno,2008,2019)) |> 
      mutate(across(where(is.logical), as.numeric)) |>
      pivot_longer(cols = -("tipo_eleccion":"votos_candidaturas"),                       names_to = "nomb_partido", values_to = "votos", values_drop_na = TRUE) 

``` 


```{r}
#| eval: true
datos_elecciones |> 
      summarise_all(n_distinct)   
```    


--------------------------

## Tidydata de Datos_elecciones


```{r}
#| code-fold: true
datos_elecciones <- datos_elecciones |> 
    mutate(fecha = ymd(glue("{anno}{mes}01")),
    id_municipio = glue("{codigo_ccaa}-{codigo_provincia}-{codigo_municipio}")) |> 
    select(-tipo_eleccion:-codigo_distrito_electoral) |> 
    relocate(c(fecha, id_municipio,nomb_partido), .before = numero_mesas)

datos_elecciones

```



---------------------------


## Tidydata de Encuestas

```{r}
#| code-fold: true
encuestas<- encuestas |> 
  mutate(across(where(is.logical), as.numeric)) |> 
  filter(year(date_elec) >= 2008) |> 
  filter(exit_poll != 1 & (size >= 750 | is.na(size))) |> 
  filter(field_date_to - field_date_from >= 1) |> 
  pivot_longer(cols = -("type_survey":"turnout"),                       names_to = "partido_enc", values_to = "votos_encuest", values_drop_na = TRUE) 
encuestas |>  summarise_all(n_distinct)

encuestas <- encuestas |> select(-c(type_survey,exit_poll))

```
---------------------------

## Normalizar los nombres de los partidos y la tabla cruzada

```{r, echo=TRUE, results='hide'}

datos_elecciones <- datos_elecciones |> 
    mutate(nomb_partido = case_when(
      str_detect(nomb_partido, "PODEMOS|UNIDAS PODEMOS|UNIDOS PODEMOS|EN COMÚ PODEM|COMUNISTA|IZQUIERDA|EZKER BATUA|VERDES") ~ "PODEMOS",
      str_detect(nomb_partido,"PARTIDO POPULAR") ~ "PARTIDO POPULAR",
      str_detect(nomb_partido,"PARTIDO SOCIALISTA OBRERO|PARTIT DELS SOCIALISTES DE CATALUNYA|PARTIDO DOS SOCIALISTAS DE GALICIA") ~ "PARTIDO SOCIALISTA OBRERO ESPAÑOL",
      str_detect(nomb_partido,"CIUDADANOS") ~ "CIUDADANOS-PARTIDO DE LA CIUDADANIA",
      str_detect(nomb_partido,"MÁS PAÍS") ~ "MÁS PAÍS",
      str_detect(nomb_partido,"SORTU | ARALAR | EUSKO ALKARTASUNA|ALTERNATIBA") ~ "EUSKAL HERRIA BILDU",
      str_detect(nomb_partido,"BNG") ~ "BNG-NÓS CANDIDATURA GALEGA",
      str_detect(nomb_partido,"COMPROMÍS") ~ "MÉS COMPROMÍS",
      str_detect(nomb_partido,"VOX") ~ "VOX",
      str_detect(nomb_partido,"CONVERGÈNCIA|UNIÓ") ~ "CONVERGENCIA i UNIO",
      str_detect(nomb_partido,"ESQUERRA REPUBLICANA") ~ "ESQUERRA REPUBLICANA DE CATALUNYA",
      TRUE ~ "OTRO"
    ))
siglas <- siglas |> 
    distinct(denominacion, .keep_all = TRUE)
``` 


```{r}
#| eval: true

datos_fusionados <- datos_elecciones |> 
  left_join(siglas, by = c("nomb_partido" = "denominacion")) |> 
  mutate(siglas = if_else(is.na(siglas), "OTROS", siglas)) |> 
  left_join(cod_mun, by = c("id_municipio" = "cod_mun"))

```
---------------------------

## 1.
### ¿Cómo se reparte el voto de partidos de ámbito nacional (PSOE, PP, VOX, CS, MP, UP - IU) frente a los partidos de corte autonómico o nacionalista?.


```{r}
#| code-fold: true

votos_partidos <- datos_fusionados %>%
  mutate(year = year(fecha)) %>%
  group_by(year, siglas) %>%
  summarise(votos_total = sum(votos, na.rm = TRUE), .groups = "drop")

votos_partidos

``` 
--------------------------------------

```{r, echo=FALSE, fig.width=10, fig.height=8}
#| echo: false


  ggplot(votos_partidos) +
  geom_col(aes(x = siglas, y = votos_total, fill = siglas), alpha = 0.7) +
  scale_y_continuous(labels = scales::label_comma()) +
  theme_minimal() +
  theme(legend.position = 'bottom',
        axis.text.x = element_text(angle = 45, hjust = 1)) +
  facet_wrap(~ year, scales = "free")

```

----------------------------------------
```{r}


#2

n_votado <- function(n, people,datos) {
    municipio <- datos |> 
        mutate(year=year(fecha)) |> 
        group_by(year, siglas, municipio) |> 
        summarise(censo_total=sum(censo), votos_total=sum(votos)) |>  ungroup()
    
    partido_winner <- municipio |> 
        filter(censo_total > people) |> 
        group_by(year) |> 
        slice_max(votos_total, n=n, with_ties = FALSE)  |> 
        slice_min(n = 1, votos_total, with_ties = FALSE) |> 
        pull(siglas)  
    
    return(partido_winner)
}

n_votado(1,100000,datos_fusionados)


#3

n_votado2 <- function(n, people, partido) {
    municipio <- datos_fusionados |> 
        mutate(year=year(fecha)) |> 
        group_by(year, siglas, municipio) |> 
        summarise(censo_total=sum(censo), votos_total=sum(votos))

    partido_winner <- municipio |> 
        filter(censo_total > people) |> 
        group_by(year) |> 
        slice_max(votos_total, n=n+1, with_ties = FALSE)
        
    first1 <- partido_winner |> slice(1) |> pull(siglas)
    second1 <- partido_winner |> slice(2) |> pull(siglas)
    
    for (i in 1:length(first1)) {
        if (partido == first1[i]) {
            name2 <- second1[i]
            break
        }
    }
    
    return(name2)
}

```

```{r}
#4

mayor_diferencia <- function(n, people) {
    municipio <- datos_fusionados |> 
        mutate(year=year(fecha)) |> 
        group_by(year, siglas, municipio) |> 
        summarise(censo_total=sum(censo), votos_total=sum(votos)) |> ungroup()

    partido_winner <- municipio |> 
        filter(censo_total > people) |> 
        group_by(year, municipio) |> 
        slice_max(votos_total, n=n+1, with_ties = FALSE) |> filter(n() > 1) 
    
    partido_winner <- partido_winner |> 
        group_by(year, municipio) |> 
        mutate(diferencia = max(votos_total) - min(votos_total)) |> ungroup()
    
    municipio_max_diferencia <- partido_winner |> slice_max(diferencia,n=1) |> slice(1) |> pull(municipio)
    
    return(municipio_max_diferencia)
}

mayor_diferencia(1,2000)
```

```{r}

mayor_porcentaje_nulos <- function() {
    municipio <- datos_fusionados |> 
        mutate(year=year(fecha)) |> 
        group_by(year, municipio) |> 
        summarise(censo_total=sum(censo), votos_nulos=sum(votos_nulos))

    porcentaje_nulos <- municipio |> 
        mutate(porcentaje_nulos = votos_nulos / censo_total * 100) |> 
        group_by(year) |> 
        slice_max(porcentaje_nulos, n=1, with_ties = FALSE)
        
    return(porcentaje_nulos)
}


```

```{r}
# mayor participacion

participacion <- datos_fusionados %>%
  mutate(year = year(fecha), parti_total = participacion_1 + participacion_2) %>%
  group_by(year, municipio, siglas) %>%
  summarise(votos_total = sum(votos), parti_total = max(parti_total), .groups = "drop")
  

mayor_parti <- participacion |>  
 
  group_by(year) |> 
  slice_max( parti_total,n=1) |>
  slice_max(votos_total,n=1) 
  

# menor participacion

participacion <- datos_fusionados %>%
  mutate(year = year(fecha), parti_total = participacion_1 + participacion_2) %>%
  group_by(year, municipio, siglas) %>%
  summarise(votos_total = sum(votos), parti_total = min(parti_total), .groups = "drop")


menor_parti <- participacion |>  
 
  group_by(year) |> 
  slice_min( parti_total,n=1) |>
  slice_min(votos_total,n=1) 

menor_parti <-pull(siglas)

# Los partidos con más votos y menos participación se benefician debido a varios factores como la falta de competencia, movilización efectiva, entre otros.
```

```{r}
#7

made_ggplot <- datos_fusionados %>%
  mutate(year = year(fecha)) %>%
  group_by(year, siglas) %>%
  summarise(voto_total = sum(votos), censo_total = sum(censo), .groups = 'drop')

ggplot(made_ggplot, aes(x = voto_total, y = censo_total)) +
    geom_point(aes(color = siglas), alpha = 0.8) +
    geom_smooth(method = "lm", se = FALSE, linewidth = 1) +
    scale_x_continuous(labels = comma) +
    scale_y_continuous(labels = comma) +
    labs(title = "Relación entre Censo y Votos por Partido",
         x = "Censo Electoral",
         y = "Número de Votos",
         caption = "Paco Martin") +
    theme_minimal()

coeficientes <- made_ggplot |> 
  group_by(year) |> 
  summarise(correlacion = cor(censo_total, voto_total, use = "complete.obs"))

# la correlación entre el censo y el voto ha aumentado con el tiempo, pasando de una correlación negativa en 2008 a una correlación positiva en 2019. Esto podría sugerir que en años más recientes, los lugares con un censo más alto tienden a tener un voto total más alto.Sin embargo, en la grafica de recta regresion nos dice que no existe una correlación fuerte entre censo y votos.Por lo tanto,no es cierto que cierto partido ganan lo rural
```

```{r}
# 8 

encuest_per <- encuestas %>%
  mutate(
    dife_day = as.integer(difftime(as.Date(field_date_to), as.Date(field_date_from), units = "days")),
    year_date_elec = year(as.Date(date_elec))
  ) |> select(-c(date_elec,field_date_from,field_date_to)) |> drop_na()

encuest_per <- encuest_per %>%
    mutate(votos = round(size * (turnout / 100) * (votos_encuest/ 100))) |>
    select(-c(size,turnout,votos_encuest)) |> 
    group_by(year_date_elec, partido_enc) |> 
    summarise(votos_encuesta = sum(votos)) |> 
    mutate(porcentaje_encuesta = votos_encuesta / sum(votos_encuesta) * 100) |> 
    ungroup()
  

      
      


siglas <- read_csv(file = "C:\\Users\\josel\\Desktop\\GRUPAL-20240103T171118Z-001\\GRUPAL\\datos\\siglas.csv")

encuest_per <- encuest_per %>%
  mutate(partido_enc =
           case_when(
             str_detect(partido_enc, "COMPROMIS") ~ "MÉS COMPROM",
             str_detect(partido_enc, "DIL-CDC") ~ "CDC",
             str_detect(partido_enc, "CS") ~ "C's",
             str_detect(partido_enc, "EH-BILDU") ~ "EH Bildu",
             str_detect(partido_enc, "UP") ~ "PODEMOS",
             str_detect(partido_enc, "CC-NC") ~ "CC-NC-PNC",
             str_detect(partido_enc, "CUP") ~ "CUP-PR",
             str_detect(partido_enc, "JXCAT-JUNTS") ~ "JxCAT-JUNTS",
             str_detect(partido_enc, "MP") ~ "M PAÍS",
             str_detect(partido_enc, "NA-SUMA") ~ "NA+",
             TRUE ~ partido_enc  # Mantener el valor original para otras filas
           ))




siglas <- read_csv(file = "C:\\Users\\josel\\Desktop\\GRUPAL-20240103T171118Z-001\\GRUPAL\\datos\\siglas.csv") 

encuest_per <- encuest_per |> left_join(siglas, by = c('partido_enc' = 'siglas'))

encuest_per <- encuest_per |> 
    mutate(denominacion = case_when(
        str_detect(denominacion, "PODEMOS|UNIDAS PODEMOS|UNIDOS PODEMOS|EN COMÚ PODEM|COMUNISTA|IZQUIERDA|EZKER BATUA|VERDES") ~ "PODEMOS",
        str_detect(denominacion,"PARTIDO POPULAR") ~ "PARTIDO POPULAR",
        str_detect(denominacion,"PARTIDO SOCIALISTA OBRERO|PARTIT DELS SOCIALISTES DE CATALUNYA|PARTIDO DOS SOCIALISTAS DE GALICIA") ~ "PARTIDO SOCIALISTA OBRERO ESPAÑOL",
        str_detect(denominacion,"CIUDADANOS") ~ "CIUDADANOS-PARTIDO DE LA CIUDADANIA",
        str_detect(denominacion,"MÁS PAÍS") ~ "MÁS PAÍS",
        str_detect(denominacion,"SORTU | ARALAR | EUSKO ALKARTASUNA|ALTERNATIBA") ~ "EUSKAL HERRIA BILDU",
        str_detect(denominacion,"BNG") ~ "BNG-NÓS CANDIDATURA GALEGA",
        str_detect(denominacion,"COMPROMÍS") ~ "MÉS COMPROMÍS",
        str_detect(denominacion,"VOX") ~ "VOX",
        str_detect(denominacion,"CONVERGÈNCIA|UNIÓ") ~ "CONVERGENCIA i UNIO",
        str_detect(denominacion,"ESQUERRA REPUBLICANA") ~ "ESQUERRA REPUBLICANA DE CATALUNYA",
        TRUE ~ "OTRO"
    ))


siglas <- siglas |> 
    distinct(denominacion, .keep_all = TRUE)

# Fusionar 'datos_elecciones' y 'siglas' basado en 'nomb_partido'
encuest_per <- left_join(encuest_per, siglas, by = c("denominacion" = "denominacion")) |> 
    mutate(siglas = if_else(is.na(siglas), "OTROS", siglas))



 encuest_per <- encuest_per |> group_by(year_date_elec,siglas) |> summarise(porcent_total=sum(porcentaje_encuesta)) |>  ungroup()
 
 resultados <- datos_fusionados |> 
  mutate(year = year(fecha)) |> 
  group_by(year, siglas) |> 
  summarise(votos_reales = sum(votos)) |> 
  mutate(porcentaje_real = votos_reales / sum(votos_reales) * 100) |> 
  ungroup()


 
 datos_completos <- full_join(encuest_per, resultados, by = c("year_date_elec" = "year", "siglas" = "siglas"))
 
 datos_completos[is.na(datos_completos)] <- 0
 
 datos_completos <- datos_completos |>  
   mutate(error=abs(porcentaje_real - porcent_total)) |> 
   mutate(error = round(error, 1))

 

datos_completos %>%
    ggplot() +
    geom_col(aes(x = siglas, y = error, fill = siglas), alpha = 0.7) +
    scale_y_continuous(labels = scales::label_comma()) +
    theme_minimal() +
    theme(legend.position = 'bottom',
          axis.text.x = element_text(angle = 45, hjust = 1)) +
    facet_wrap(~ year_date_elec, scales = "free")


```

```{r}

#9

datos_completos |> group_by(year_date_elec) |> slice_max(error,n=1) |>  ungroup()
```

```{r}

#10

error_nacional <- datos_completos |> filter(siglas %in% c("PSOE", "PP", "VOX", "C's", "M PAÍS", "PODEMOS"))

error_nacional %>%
    ggplot() +
    geom_col(aes(x = siglas, y = error, fill = siglas), alpha = 0.7) +
    scale_y_continuous(labels = scales::label_comma()) +
    theme_minimal() +
    theme(legend.position = 'bottom',
          axis.text.x = element_text(angle = 45, hjust = 1)) +
    facet_wrap(~ year_date_elec, scales = "free")

```

```{r}

```

Los datos serán los siguientes:

-   `datos_elecciones`: archivo con los datos electorales al Congreso desde 2018 hasta las últimas de 2019.

    -   `tipo_eleccion`: tipo de elección (02 si es elección al congreso)
    -   `anno`, `mes`: año y mes de las elecciones
    -   `vuelta`: vuelta electoral (1 si es primera vuelta)
    -   `codigo_ccaa, codigo_provincia, codigo_municipio, codigo_distrito_electoral`: código de la ccaa, provincia, municipio y distrito electoral.
    -   `numero_mesas`: número de mesas electorales
    -   `censo`: censo electoral
    -   `participacion_1, participacion_2`: participación en el primer avance (14:00) y segundo avance (18:00) antes del cierre de urnas (20:00)
    -   `votos_blancos`: votos en blanco
    -   `votos_candidaturas`: votos a papeletas de partidos
    -   `votos_nulos`: votos nulos
    -   votos recibidos por cada uno de los partidos

-   `cod_mun`: archivo con los códigos y nombres de cada municipio

-   `siglas`: siglas y nombres asociados a cada partido

-   `encuestas`: tabla de encuestas electorales desde 1982. Algunas de las variables son las siguientes:

    -   `type_survey`: tipo de encuesta (nacional, autonómica, etc)
    -   `date_elec`: fecha de las futuras elecciones
    -   `id_pollster`, `pollster`, `media`: identificador y nombre de la casa encuestadora, así como el medio que lo haya encargado
    -   `field_date_from`, `field_date_to`: fecha de inicio y final del trabajo de campo
    -   `exit_poll`: si se trata de una encuesta a pie de urna o no
    -   `size`: tamaño muestral
    -   `turnout`: estimación de la participación
    -   estimación de intención de voto para los principales partidos

### Objetivos e ítems obligatorios

El objetivo de la entrega es realizar un análisis de los datos electorales, llevando a cabo la depuración, resúmenes y gráficos que consideres, tanto de sus resultaados como del acierto de las encuestas electorales.

En concreto **se deberá trabajar solo en la ventana temporal que comprenden las elecciones desde 2008 hasta las últimas elecciones de 2019**.

#### Indicaciones generales

Amén de lo que te parezca oportuno ejecutar, serán obligatorios los siguientes ítems:

-   Cada grupo deberá presentar **al menos 48 horas antes un análisis de los datos** en formato `.qmd` y `.html` en modo **diapositivas**, que **serán las que expongan el día de la presentación**.

-   Durante la presentación se **explicará el análisis realizado** de manera que **cada miembro del equipo habla un tiempo similar** y **cada miembro podrá ser preguntado por cualquiera de los pasos**. La nota no tendrá porque ser la misma para todos/as los/as integrantes.

-   Se valorará no solo el contenido sino el continente (estética).

-   Se valorará positivamente que las diapositivas estén alojadas en Github.

-   El objetivo es demostrar que se adquirido el máximo de conocimientos del curso: cuantas más contenido del temario se incluya, mejor.

#### Ítems obligatorios:

-   Se deberá de **convertir los datos a tidydata** cuando proceda.

-   Se deberá **incluir al menos un cruce (join)** entre tablas.

-   Reminder: información = varianza, así que se deberán **retirar columnas que no nos van a aportar nada**.

-   Se deberá usar el **paquete glue y lubridate** en algún momento, así como el paquete **forcats**, **ggplot2** y **plotly**

-   Se deberá usar al menos una vez lo siguiente:

    -   mutate
    -   summarise
    -   group_by (o equivalente)
    -   case_when

-   Tenemos muchísimos partidos que se presentan a las elecciones. Solo nos intereserán los siguientes partidos:

    -   PARTIDO SOCIALISTA OBRERO ESPAÑOL (cuidado: tiene/tuvo federaciones - sucursales - con algún otro nombre)
    -   PARTIDO POPULAR
    -   CIUDADANOS (cuidado: tiene/tuvo federaciones - sucursales - con algún otro nombre)
    -   PARTIDO NACIONALISTA VASCO
    -   BLOQUE NACIONALISTA GALEGO
    -   COMPROMÍS
    -   CONVERGÈNCIA I UNIÓ
    -   UNIDAS PODEMOS - IU (cuidado que aquí han tenido nombres variados - IU, los verdes, podem, ezker batua, ...- y no siempre han ido juntos, pero aquí los analizaremos juntos
    -   ESQUERRA REPUBLICANA DE CATALUNYA
    -   EH - BILDU (son ahora una coalición de partidos formados por Sortu, Eusko Alkartasuna, Aralar, Alternatiba)
    -   MÁS PAÍS
    -   VOX7\*

-   Todo lo que no sea alguno de los anteriores partidos deberá ser imputado como "OTROS". Recuerda agregar los datos tras la recodificación anterior.

-   Para las visualizaciones se usarán las siglas de los partidos. El trabajo deberá contener al menos 5 gráficas, de las cuales al menos 3 deben ser tipos de gráficos distintos (ver <https://r-graph-gallery.com/>), todas ellas con un tema personalizado

-   Deberás usar los 4 archivos de datos en algún momento

-   Deberás definir al menos una función propia (que no sea trivial)

-   Deberás descartar obligatoriamente las encuestas que:

    -   hagan referencia a elecciones anteriores a 2018
    -   que sean a pie de urna
    -   que tenga un tamaño muestral inferior a 750 o que sea desconocido
    -   que tengan menos de 1 o menos días de trabajo de campo

-   Deberás responder obligatoriamente a las siguientes preguntas (más las que consideres analizar para distinguirte del resto de equipos, ya sea numérica y/o gráficamente, pudiendo responder con números y/o con gráficos, decidiendo la mejor visualización que consideres.)

    -   ¿Cómo se reparte el voto de partidos de ámbito nacional (PSOE, PP, VOX, CS, MP, UP - IU) frente a los partidos de corte autonómico o nacionalista?
    -   ¿Cuál el partido ganador en los municipios de más de 100 000 habitantes de censo en cada una de las elecciones?
    -   ¿Qué partido fue el segundo cuando el primero fue el PSOE? ¿Y cuándo el primero fue el PP?
    -   ¿En qué municipios de más 2000 habitantes de censo, provincias o autonomías la diferencia entre el ganador y el segundo es más elevada?
    -   ¿Cuáles son los municipios con mayor porcentaje de votos nulos de España?
    -   ¿En qué sitios hay mayor participación? ¿Quién ganó en los sitios con mayor participación y donde menos? ¿A quién le beneficia la baja participación?
    -   ¿Cómo analizar la relación entre censo y voto? ¿Es cierto que ciertos partidos ganan lo rural?
    -   ¿Cómo calibrar el error de las encuestas? ¿Cómo visualizarlo? (recuerda que las encuestas son intención de voto a nivel nacional)
    -   ¿En qué elección se equivocaron más las encuestas?
    -   ¿Cómo se equivocaron las encuestas en partidos de ámbito nacional (PSOE, PP, VOX, CS, MP, UP - IU)
    -   ¿Qué casas encuestadores acertaron más y cuales se desviaron más de los resultados?

#### Calificación

**No se valorará más al que más cosas haga**. Más no siempre es mejor. Se valorará la **originalidad** (respecto al resto de trabajos, por ejemplo en lo analizado o en el tema o ...) de lo planteado, tanto en manejo de tablas como en visualización, el **cariño** puesto en la entrega (el cariño en la vida es importante) y la **pertinencia** de lo realizado. Una vez que tengáis los ítems obligatorios con tu base de datos más o menos completada, **piensa antes** de ponerte a picar código: ¿qué puede ser interesante? ¿Qué necesito para poder obtener un resumen tanto numérico tanto visual?

Recordad que el fin real es demostrarme un dominio de las herramientas vistas a lo largo del curso. Y eso pasa no solo por la cantidad de ellas utilizadas sino por la calidad al ejecutarlas.
